function runTwoLinkExperiment_Experiment1()

	subjectInitials = 'test';
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    % load pre-computed simulation
    load('Variable/twoLinkStates_Experiment1_Variable.mat'); %this is the variable condition
    %Alternatively one could use:
%     load('Reverse/twoLinkStates_Experiment1_Reverse.mat'); 
%     load('Constant/twoLinkStates_Experiment1_Constant.mat'); 
%     load('Original/twoLinkStates_Experiment1_Original.mat'); 
    
    % create simulation interface
    graphicsScale = 1;
    graphicsOffset = [0 -.3];
    close all;
    fig = createUI(graphicsScale, graphicsOffset);
    handles = guidata(fig);

    % generate randomized trial conditions
    trialConditions = [randperm(6) randperm(6) randperm(6) randperm(6) randperm(6)];

    % generate variable for storing ratings
    setappdata(fig, 'ratings', zeros(1, length(trialConditions)));
    
    for trial = 1:length(trialConditions)
        
        % set trial number
        setappdata (fig, 'trialNumber', trial);
        
        
        % use the adjusted time series from the struct
        t = tAdjusted{trialConditions(trial)};
        % get the states for the simulation
        state = twoLinkStates{trialConditions(trial)}(:,2:end);
        
        figure(1); hold on;
    
        % wait for button press of next trial
        set(handles.startPanel, 'Visible', 'on');
        set(handles.startButton, 'Visible', 'on');
        waitfor(handles.startButton, 'Visible', 'off');
        
        % wait for initialization
        startTime = tic;
        pause(4)
        set(handles.startPanel, 'Visible', 'off');
        timeElapsed = toc(startTime);
        
        % run simulation
        % ERRORS BELOW
        while timeElapsed < 22
            [~,minI] = min(abs(t-timeElapsed));
            set(handles.arm1, 'XData', [0, arm.l1*cos(state(minI,1))]*graphicsScale+graphicsOffset(1), ...
                              'YData', [0, arm.l1*sin(state(minI,1))]*graphicsScale+graphicsOffset(2));
            set(handles.arm2, 'XData', [arm.l1*cos(state(minI,1)), arm.l1*cos(state(minI,1))+arm.l2*cos(sum(state(minI,1:2)))]*graphicsScale+graphicsOffset(1), ...
                              'YData', [arm.l1*sin(state(minI,1)), arm.l1*sin(state(minI,1))+arm.l2*sin(sum(state(minI,1:2)))]*graphicsScale+graphicsOffset(2));
            drawnow;
            timeElapsed = toc(startTime);
        end
        
        % wait for arm stiffness rating
        set(handles.ratePanel, 'Visible', 'on');
        set(handles.rateButton, 'Visible', 'on');
        waitfor(handles.rateButton, 'Visible', 'off');
    end

    ratings = getappdata(fig,'ratings'); %Get ratings
    save(sprintf('%s.mat', subjectInitials), 'trialConditions', 'ratings'); %save all data
    close all;
end


function fig = createUI(graphicsScale, graphicsOffset)

    fig = figure('Tag','fig',...
        'Units','inches',...
        'OuterPosition',[0, 0, 7, 7],...
        'Color',[0 0 0],...
        'Renderer', 'zbuffer', ...
        'MenuBar', 'none', ...
        'ToolBar', 'none', ...
        'Resize', 'off');
             
    startPanel = uipanel('Parent',fig,...
        'Tag','startPanel', ...
        'Units','normalized',...
        'Position',[0 0 1 1],...
        'BackgroundColor','k', ...
        'BorderType', 'none', ...
        'Visible', 'on');
    
    startButton = uicontrol('Parent', startPanel, ...
        'Tag','startButton', ...
        'Style','pushbutton',...
        'Units','normalized',...
        'FontUnits','normalized',...
        'Position',[0.1 0.7 .8 0.2],...
        'FontSize',.2,...
        'BackgroundColor',[0 1 0],...
        'ForegroundColor', [0 0 0], ...
        'String', 'Start Trial 1 of 30',...
        'HorizontalAlignment','center',...
        'HandleVisibility','callback',...
        'Callback', @startTrial,...
        'Visible','on');
    
    ratePanel = uipanel('Parent',fig,...
        'Tag','ratePanel', ...
        'Units','normalized',...
        'Position',[0 0 1 1],...
        'BackgroundColor','w', ...
        'BorderType', 'none', ...
        'Visible', 'off');
    
    rateText = uicontrol('Parent', ratePanel, ...
        'Tag','rateText', ...
        'Style','text',...
        'Units','normalized',...
        'FontUnits','normalized',...
        'Position',[0 0.7 1 0.2],...
        'FontSize',.4,...
        'BackgroundColor', 'w',...
        'ForegroundColor', [0 0 0], ...
        'String','Rate Arm Stiffness',...
        'HorizontalAlignment','center',...
        'HandleVisibility','callback',...
        'Visible','on');
    
    rateButton = uicontrol('Parent', ratePanel, ...
        'Tag','rateButton', ...
        'Style','pushbutton',...
        'Units','normalized',...
        'FontUnits','normalized',...
        'Position',[0.1 0.1 .8 0.2],...
        'FontSize',.2,...
        'BackgroundColor',[1 0 0],...
        'ForegroundColor', [0 0 0], ...
        'String', 'Submit Rating',...
        'HorizontalAlignment','center',...
        'HandleVisibility','callback',...
        'Callback', @saveRating,...
        'Visible','on');
    
    rateList = uicontrol('Parent',ratePanel,...
        'Tag','rateList', ...
        'Style', 'listbox', ...
        'Units','normalized',...
        'Position',[.2 .4 .6 .4],...
        'FontUnits','normalized',...
        'FontSize',.12,...
        'BackgroundColor','w', ...
        'String', {'1: Least Stiff', '2', '3', '4', '5', '6', '7:Most Stiff'}, ...
        'Value', 4, ...
        'Visible', 'on');
     
    
    ax = axes('Parent',fig,...
        'Tag','ax', ...
        'Units','normalized',...
        'Position',[0 0 1 1],...
        'XLim',[-1 1],...
        'YLim',[-1 1],...
        'XLimMode', 'manual', ...
        'YLimMode', 'manual', ...
        'Projection', 'orthographic', ...
        'Color',[0 0 0], ...
        'Visible', 'off');
    
    axis off
          
    circle = line('Parent',ax, ...
        'Tag','circle', ...
        'LineStyle', '-',...
        'XData', (.15*cosd(0:360)+ 0)*graphicsScale+graphicsOffset(1),... % change me for moving the circle
        'YData', (.15*sind(0:360)+ 0.45)*graphicsScale+graphicsOffset(2),...
        'LineStyle', '-', ...
        'LineWidth', 5, ...
        'Color','r', ...
        'Visible', 'off');
    
    arm1 = line('Parent',ax, ...
        'Tag','arm1', ...
        'LineStyle', '-',...
        'XData', [0 0],...
        'YData', [0 0],...
        'LineStyle', '-', ...
        'Marker', '.', ...
        'MarkerSize', 100, ...
        'LineWidth', 10, ...
        'Color','w'); 

    arm2 = line('Parent',ax, ...
        'Tag','arm2', ...
        'LineStyle', '-',...
        'XData', [0 0],...
        'YData', [0 0],...
        'LineStyle', '-', ...
        'Marker', '.', ...
        'MarkerSize', 100, ...
        'LineWidth', 10, ...
        'Color','w');

    % create handles structure
    ad = guihandles(fig);
    
    % save application data
    guidata(fig, ad);
end

function startTrial(hObject, eventdata)
    handles = guidata(hObject);
    fig = findall(0, 'Tag', 'fig');
    set(handles.startButton, 'Visible', 'off', 'String', sprintf('Start Trial %d of 30', 1+getappdata(fig, 'trialNumber')));
end

function saveRating(hObject, eventdata)
    handles = guidata(hObject);
    fig = findall(0, 'Tag', 'fig');
    ratings = getappdata(fig,'ratings');
    ratings(getappdata(fig,'trialNumber')) = get(handles.rateList,'Value');
    setappdata(fig, 'ratings', ratings);
    set(handles.ratePanel, 'Visible', 'off');
    set(handles.rateButton, 'Visible', 'off');
end

